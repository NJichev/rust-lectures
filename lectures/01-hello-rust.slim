= slide 'Hello, world!' do
  p –ó–∞—â–æ—Ç–æ –≤–∏–Ω–∞–≥–∏ –æ—Ç—Ç–∞–º —Å–µ –ø–æ—á–≤–∞:

  example:
    fn main() {
        println!("Hello, world!");
    }

  pre.action
    ' $ rustc hello.rs
      $ ./hello
      Hello, world!

= slide '–ù—è–º–∞ –ª–∏ –∏ –ø–æ-–ª–µ—Å–µ–Ω –Ω–∞—á–∏–Ω?', '(–∏–º–∞, —Ä–∞–∑–±–∏—Ä–∞ —Å–µ)' do

  pre
    ' $ cargo new hello --bin
      $ cargo run
      Hello, world!

= slide 'Cargo' do
  list:
    Package manager
    Task runner
    –ü–æ–¥–æ–±–Ω–æ –Ω–∞ <strong>mix</strong> –≤ elixir, <strong>bundler</strong> –≤ ruby, <strong>npm</strong> –≤ node.js

= slide 'Rustc' do
  list:
    –£–¥–æ–±–Ω–æ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ, –±—ä—Ä–∑–∏ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏
    –ù–µ–Ω—É–∂–Ω–æ –∑–∞ –ø–æ–≤–µ—á–µ—Ç–æ —Ü–µ–ª–∏

= slide 'Cargo' do
  em (demo)

= slide '–ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è' do
  list:
    Rustup ([https://www.rustup.rs/](https://www.rustup.rs/))
    <code>$ rustup install stable</code>
    <code>$ rustup doc</code>

= slide 'The Rust Book' do
  p
    a href="https://doc.rust-lang.org/book/second-edition/"
      ' https://doc.rust-lang.org/book/second-edition/

= slide 'Rust playpen' do
  p
    a href="https://play.rust-lang.org/"
      ' https://play.rust-lang.org/

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞' do
  <table>
    <thead>
      <tr>
        <th rowspan="2">Length</th>
        <th colspan="2">Rust</th>
        <th colspan="2">C/C++</th>
      </tr>
      <tr>
        <th>Signed</th>
        <th>Unsigned</th>
        <th>Signed</th>
        <th>Unsigned</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>8-bit</td>
        <td><code>i8</code></td>
        <td><code>u8</code></td>
        <td><code>char</code></td>
        <td><code>unsigned char</code></td>
      </tr>
      <tr>
        <td>16-bit</td>
        <td><code>i16</code></td>
        <td><code>u16</code></td>
        <td><code>short</code></td>
        <td><code>unsigned short</code></td>
      </tr>
      <tr>
        <td>32-bit</td>
        <td><code>i32</code></td>
        <td><code>u32</code></td>
        <td><code>int</code></td>
        <td><code>unsigned int</code></td>
      </tr>
      <tr>
        <td>64-bit</td>
        <td><code>i64</code></td>
        <td><code>u64</code></td>
        <td><code>long long</code></td>
        <td><code>unsigned long long</code></td>
      </tr>
      <tr>
        <td>arch</td>
        <td><code>isize</code></td>
        <td><code>usize</code></td>
        <td><code>long</code></td>
        <td><code>unsigned long</code></td>
      </tr>
    </tbody>
  </table>

  –¢–∏–ø–∞ <code>u8</code> –∏ —Ç–∏–ø–∞ <code>char</code> —Å–∞ –Ω–∞–ø—ä–ª–Ω–æ —Ä–∞–∑–ª–∏—á–Ω–∏!

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (–ª–∏—Ç–µ—Ä–∞–ª–∏)' do
  list:
    –¶—è–ª–æ —á–∏—Å–ª–æ: <code>42</code>
    –°–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω —Ç–∏–ø: <code>42u32</code>
    –ì–æ–ª–µ–º–∏ —á–∏—Å–ª–∞: <code>133_587</code>
    <code>42_u32</code>
    <code>1_0_0_0</code>
    <code>1_____________________________________________________4</code>

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (–≤ —Ä–∞–∑–ª–∏—á–Ω–∏ –±—Ä–æ–π–Ω–∏ —Å–∏—Å—Ç–µ–º–∏)' do
  list:
    Hex: <code>0xDEADBEEF</code>
    Octal: <code>0o77</code>
    Binary: <code>0b1010011010</code>

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', '–ß–∏—Å–ª–∞ (—Å –ø–ª–∞–≤–∞—â–∞ –∑–∞–ø–µ—Ç–∞—è)' do
  thead
    tr
      th Length
      th Rust
      th C/C++
  tbody
    tr
      td 32-bit
      td <code>f32</code>
      td <code>float</code>
    tr
      td 64-bit
      td <code>f64</code>
      td <code>double</code>

  list:
    <code>3.14</code> // f64
    <code>3.14_f32</code> // f32

= slide '–û—Å–Ω–æ–≤–Ω–∏ —Ç–∏–ø–æ–≤–µ', 'bool' do
  <code>true</code>
  <code>false</code>

  list:
    –ò–º–∞ –≥–æ–ª–µ–º–∏–Ω–∞ 1 –±–∞–π—Ç
    –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ <code>!</code>

= slide '–ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏' do

  example:
    let pi: f64 = 3.14;
    let pi      = 3.14;
    let pi: f32 = 3.14;
    let pi      = 3.14_f32;

  –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –¥–µ–∫–ª–∞—Ä–∏—Ä–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ —Å –µ–¥–Ω–æ <code>let</code> —Ç–≤—ä—Ä–¥–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–≤–µ–Ω—Ü–∏–æ–Ω–∞–ª–Ω–∏—è –Ω–∞—á–∏–Ω

  example:
    let x = 5, y = 3;

  <code>
    error: expected one of `.`, `;`, `?`, or an operator, found `,`
  </code>

= slide 'No emoji' do
  p https://twitter.com/sgrif/status/839214027117105152 (TODO embed image)

  example:
    fn main() {
      let üòÄ = 123;
      println!("{:?}", üòÄ);
    }

  <code>
    error: unknown start of token: \u{1f600}
     --> src/main.rs:2:7
      |
    2 |   let üòÄ = 123;
      |       ^

    error: Could not compile `playground`.
  </code>

= slide '–ö–æ–º–µ–Ω—Ç–∞—Ä–∏' do
  –ö–æ–º–µ–Ω—Ç–∞—Ä–∏—Ç–µ –¥–æ–ø—Ä–∏–Ω–∞—Å—è—Ç –∑–∞ —á–µ—Ç–∏–º–æ—Å—Ç—Ç–∞ –Ω–∞ –∫–æ–¥–∞.

  example:
    // Hello world.

  –ö–æ–º–µ–Ω—Ç–∞—Ä–∏—Ç–µ –∑–∞–ø–æ—á–≤–∞—Ç —Å <code>//</code> –∏ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞—Ç –¥–æ –∫—Ä–∞—è –Ω–∞ —Ä–µ–¥–∞.

  example:
    // So we‚Äôre doing something complicated here, long enough that we need
    // multiple lines of comments to do it! Whew! Hopefully, this comment will
    // explain what‚Äôs going on.

  Rust –ø–æ–¥–¥—ä—Ä–∂–∞ –∏ <code>/* ... */</code>, –Ω–æ –≤—Å–µ –æ—â–µ –µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ <code>//</code>

  example:
    /*
      Hello
      world
    */

= slide '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –º–µ–∂–¥—É —Ç–∏–ø–æ–≤–µ', '(type casting)' do
  –ö–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ <code>as</code>.

  example:
    let one = true as u8;
    let two_hundred = -56i8 as u8;
    let three = 3.14 as u32;

  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ –æ—Ç –ø–æ-–≥–æ–ª—è–º —Ç–∏–ø –∫—ä–º –ø–æ-–º–∞–ª—ä–∫ –º–æ–∂–µ –¥–∞ –¥–æ–≤–µ–¥–µ –¥–æ –∑–∞–≥—É–±–∞ –Ω–∞ –¥–∞–Ω–Ω–∏

  example
    let x = 0b11111111_00000001_u16;
    let y = x as u8;

    println!("{}", y); // ??

  –ü—Ä–∞–≤–∏–ª–∞ –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ:
  list:
    –û—Ç —á–∏—Å–ª–µ–Ω —Ç–∏–ø –∫—ä–º —á–∏—Å–ª–µ–Ω —Ç–∏–ø.
    –û—Ç <code>bool</code> –∏–ª–∏ <code>char</code> –∫—ä–º —á–∏—Å–ª–µ–Ω —Ç–∏–ø.
    –ò–º–∞ –∏ –æ—â–µ, –Ω–æ —â–µ –≥–æ–≤–æ—Ä–∏–º –∑–∞ —Ç—è—Ö –ø–æ-–Ω–∞—Ç–∞—Ç—ä–∫

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '–∞—Ä–∏—Ç–º–µ—Ç–∏–∫–∞' do
  example:
    let sum = 5 + 10;             // —Å—ä–±–∏—Ä–∞–Ω–µ
    let difference = 95.5 - 4.3;  // –∏–∑–≤–∞–∂–¥–∞–Ω–µ
    let product = 4 * 30;         // —É–º–Ω–æ–∂–µ–Ω–∏–µ
    let quotient = 56.7 / 32.2;   // –¥–µ–ª–µ–Ω–µ
    let remainder = 43 % 5;       // –æ—Å—Ç–∞—Ç—ä–∫

  –ê–∫—É–º—É–ª–∞—Ç–∏–≤–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏

  example:
    sum += 100;
    difference -= 4.0;
    product *= 1;
    quotient /= 1.2;
    remainder %= 2;

  –ù–µ –º–æ–∂–µ –¥–∞ –ø—Ä–∏–ª–∞–≥–∞–º–µ –∞—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ä—Ä—Ö—É —á–∏—Å–ª–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ —Ç–∏–ø–æ–≤–µ

  example:
    let x = 4_u32 - 1_u8;
    let y = 1.2_f64 / 0.8_f32;

  –ù–æ—Ä–º–∞–ª–Ω–∏—Ç–µ –∞—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —â–µ —Ö–≤—ä—Ä–ª—è—Ç –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–ø—ä–ª–≤–∞–Ωe (overflow)

  example:
    let x = -1_i32 as u32;
    x += 1;

= slide '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞', '—Å—Ä–∞–≤–Ω–µ–Ω–∏—è' do

  example:
    2   >   1;
    x   <   95;
    3   >=  3;
    -10 <=  1;
    a   ==  a;
    5   !=  1000;

  –í—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä—ä—â–∞—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç —Ç–∏–ø <code>bool</code>.

= slide 'Control flow', 'if-–∫–ª–∞—É–∑–∏' do
  example:
    if bool_expression {
      // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else if another_bool_expression {
      // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    } else {
      // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

  list:
    –ù—è–º–∞ –∫—Ä—ä–≥–ª–∏ —Å–∫–æ–±–∏
    <code>if</code> –ø—Ä–∏–µ–º–∞ —Å–∞–º–æ –±—É–ª–µ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞–∑–ª–∏–∫–∞ –æ—Ç C/C++
    <code>if-else</code> –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ç–∞ –µ –∏–∑—Ä–∞–∑ (expression)

  example:
    let x = if true {
      5
    } else {
      3
    }
    println!("{}", x);

  Rust –Ω—è–º–∞ —Ç–µ—Ä–Ω–∞—Ä–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ —Ç–∞–∑–∏ –ø—Ä–∏—á–∏–Ω–∞

= slide 'Control flow', '—Ü–∏–∫–ª–∏' do
  example:
    while bool_expression {
      // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

  list:
    –û—Ç–Ω–æ–≤–æ –Ω—è–º–∞ –∫—Ä—ä–≥–ª–∏ —Å–∫–æ–±–∏
    –ú–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ –±–µ–∑–∫—Ä–∞–µ–Ω —Ü–∏–∫—ä–ª —Å <code>while true</code>, –Ω–æ –Ω–µ –µ –ø—Ä–µ–ø–æ—Ä–∏—á–∏—Ç–µ–ª–Ω–æ

  example:
    loop {
      // —Ç–≤—ä—Ä–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑—Ä–∞–∑–∏
    }

  list:
    <coe>loop</code> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è –Ω–∞ –∫–æ–º–ø–∏–ª–∞—Ç–æ—Ä–∞ –ø–æ –¥–æ–±—Ä–∏ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    –¢—Ä—è–±–≤–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ <code>break</code> –∑–∞ –¥–∞ –∏–∑–ª–µ–∑–µ–º –æ—Ç —Ü–∏–∫—ä–ª–∞

  example:
    loop {
      println!("Once");
      break;
    }

  –í–∏–∑–º–æ–∂–Ω–æ –µ –¥–∞ –≤—Ä—ä—â–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç <code>loop</code> —á—Ä–µ–∑ <code>break</code>

  example:
    let x = loop {
      break 1;
    }
    println!("{}", x);

  –ò–º–µ–Ω—É–≤–∞–Ω–∏ —Ü–∏–∫–ª–∏

  example:
    'a: loop {
        'b: loop {
            break 'a;
        }
        println!("John Cena");
    }
    println!("Hi!");

  <code>'a</code> –∏ <code>'b</code> —Å–µ –Ω–∞—Ä–∏—á–∞—Ç –µ—Ç–∏–∫–µ—Ç–∏

= slide '–§—É–Ω–∫—Ü–∏–∏' do
  example:
    fn foo_bar() {
      println!("example");
    }

  list:
    <code>main</code> –µ –µ–¥–Ω–∞ –æ—Ç –Ω–∞–π –≤–∞–∂–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –µ–∑–∏–∫–∞ (entry point)
    –§—É–Ω–∫—Ü–∏–∏—Ç–µ –≤ Rust –∏–∑–ø–æ–ª–∑–≤–∞—Ç <code>snake_case</code> –∫–æ–Ω–≤–µ–Ω—Ü–∏—è—Ç–∞
    Rust –Ω–µ –ø—Ä–∞–≤–∏ —Ä–∞–∑–ª–∏–∫–∞ –¥–∞–ª–∏ —Ñ—É–Ω—Ü–∏—è—Ç–∞ —Å–µ –¥–µ–∫–ª–∞—Ä–∏—Ä–∞ –ø—Ä–µ–¥–∏ –∏–ª–∏ —Å–ª–µ–¥ –º—è—Å—Ç–æ—Ç–æ –∫—ä–¥–µ—Ç–æ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞

  example:
    f();
    fn f() {
        println!("Oh, Hi Mark!");
    }
    f();

  –§—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –∫–æ—è—Ç–æ –≤—Ä—ä—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç:

  example:
    fn add(a: u32, b: u32) -> u32 {
      // note no semicolon
      a + b
    }

  list:
    –í Rust –≤—ä—Ä–Ω–∞—Ç–∞–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è –∏–∑—Ä–∞–∑ –≤ —Ç—è–ª–æ—Ç–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞
    –ê–∫–æ –∏—Å–∫–∞–º–µ –¥–∞ –∏–∑–ª–µ–∑–µ–º –æ—Ç —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –ø—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–µ–¥, –º–æ–∂–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ <code>return</code>

  example:
    fn g(condition: bool) -> u32 {
      if condition {
        return 5;
      }

      1
    }

  –¢—ä–π –∫–∞—Ç–æ <code>if</code> –µ –∏–∑—Ä–∞–∑ –º–æ–∂–µ –¥–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–º–µ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ —Å–ª–µ–¥–Ω–∏—è –Ω–∞—á–∏–Ω

  example:
    fn g(condition: bool) -> u32 {
      if condition {
        5
      } else {
        1
      }
    }

  –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ <code>return</code> –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è —Ä–µ–¥ –æ—Ç —Ç—è–ª–æ—Ç–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å–µ —Å—á–∏—Ç–∞ –∑–∞ –ª–æ—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞

  example:
    fn plus_one(val: u32) -> u32 {
      // bad practice
      return val + 1;
    }

  –ê–∫–æ –Ω–µ —É—Ç–æ—á–Ω–∏–º —Ç–∏–ø–∞ –Ω–∞ –≤—Ä—ä—â–∞–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Ç—è –µ <code>()</code> –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ

  TODO explain tuples beforehand maybe?

= slide '–ü—ä—Ä–≤–æ –ø—Ä–µ–¥–∏–∑–≤–∏–∫–∞—Ç–µ–ª—Å—Ç–≤–æ' do
  ' TODO —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ —Å–º—è—Ç–∞ —á–∏—Å–ª–∞ –Ω–∞ —Ñ–∏–±–æ–Ω–∞—á–∏
